<head>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"
  />
  <link rel="stylesheet" href="/styles/chat.css" />
</head>

<body>
  <%- include("partials/sideNav.ejs") %>
  <div class="main-content d-flex flex-column vh-100">
    <!-- Mobile header -->
    <div
      class="mobile-header p-3 d-flex align-items-center"
      style="background-color: #1f2937; border-bottom: 1px solid #374151"
    >
      <button class="btn btn-outline-light me-3" id="menuToggle">
        <i class="bi bi-list"></i>
      </button>
      <h2 class="text-white mb-0">Chat</h2>
    </div>

    <!-- Desktop header -->
    <header
      class="desktop-header p-2 flex-shrink-0"
      style="background-color: #1f2937; border-bottom: 1px solid #374151"
    >
      <h2 class="ps-2 text-white">Chat</h2>
    </header>

    <!-- Chat messages -->
    <main
      class="flex-grow-1 overflow-y-auto p-4 initial-state"
      id="chatMessages"
    >
      <div id="initial-view">
        <h1 class="text-white">Welcome to GitKit</h1>
        <h3 class="text-secondary">What would you like to create</h3>
      </div>
    </main>

    <!-- Input section -->
    <div class="p-3 flex-shrink-0" style="border-top: 1px solid #374151">
      <div class="input-group">
        <input
          type="text"
          id="userInput"
          placeholder="Click here to start..."
          class="form-control form-control-lg text-white"
          style="
            box-shadow: none !important;
            outline: 0 !important;
            background-color: #374151;
            border-color: #4b5563;
          "
        />
        <button class="btn btn-primary" id="sendBtn">Send</button>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Chat functionality
    let chatStarted = false;
    let currentQuestion = 0;
    let projectData = {
      title: "",
      description: "",
      tech_used: "",
      pack: "",
    };

    const questions = [
      "What is your project title?",
      "Provide a small description of your project.",
      "What technologies and languages do you want to use?",
      "Would you like to create a starter pack or complete project?",
    ];

    const chatMessages = document.getElementById("chatMessages");
    const userInput = document.getElementById("userInput");
    const sendBtn = document.getElementById("sendBtn");
    const initialView = document.getElementById("initial-view");

    function addMessage(sender, message, isBot = false) {
      const messageDiv = document.createElement("div");
      messageDiv.className = "mb-3";

      const senderDiv = document.createElement("div");
      senderDiv.className = "fw-bold text-white";

      const contentDiv = document.createElement("div");
      contentDiv.className = "d-inline-block p-3 rounded mt-1";
      contentDiv.style.maxWidth = "80%";

      if (isBot) {
        senderDiv.innerHTML = '<i class="bi bi-robot"></i> GitKit';
        contentDiv.className += " text-white";
        contentDiv.style.backgroundColor = "#374151";
      } else {
        senderDiv.innerHTML = '<i class="bi bi-person-fill"></i> You';
        contentDiv.className += " bg-primary text-white ms-auto";
        contentDiv.style.marginLeft = "auto";
        messageDiv.className += " d-flex flex-column align-items-end";
      }

      contentDiv.innerHTML = message;
      messageDiv.appendChild(senderDiv);
      messageDiv.appendChild(contentDiv);
      chatMessages.appendChild(messageDiv);

      // Scroll to bottom
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function handleUserResponse() {
      if (!chatStarted) return;
      const answer = userInput.value.trim();
      if (!answer) return;

      // Add user message to chat
      addMessage("You", answer, false);

      // Store the answer
      switch (currentQuestion) {
        case 1:
          projectData.title = answer;
          break;
        case 2:
          projectData.description = answer;
          break;
        case 3:
          projectData.tech_used = answer;
          break;
        case 4:
          projectData.pack = answer;
          break;
      }

      // Clear input
      userInput.value = "";

      // Move to next question or show summary
      setTimeout(() => {
        if (currentQuestion < 4) {
          currentQuestion++;
          addMessage(
            "GitKit",
            `<strong>Question ${currentQuestion}:</strong> ${
              questions[currentQuestion - 1]
            }`,
            true
          );
        } else {
          // Show project summary
          const summary = `
              <strong>Great! Here's your project summary:</strong><br><br>
              <strong>üìù Title:</strong> ${projectData.title}<br>
              <strong>üìã Description:</strong> ${projectData.description}<br>
              <strong>üõ†Ô∏è Technologies:</strong> ${projectData.tech_used}<br>
              <strong>üõ†Ô∏è Pack:</strong> ${projectData.pack}<br><br>
              Ready to start building your project!
              <button class="btn btn-primary mt-2" id="saveProjectBtn">Save</button>
              
            `;
          addMessage("GitKit", summary, true);

          // Disable input after completion
          userInput.placeholder = "Project setup complete!";
          userInput.disabled = true;
          sendBtn.disabled = true;
        }
      }, 1000);
    }

    function startChat() {
      if (chatStarted) return;
      chatStarted = true;
      currentQuestion = 1;
      userInput.placeholder = "Type your answer here...";
      initialView.classList.add("fade-out");
      initialView.addEventListener(
        "transitionend",
        () => {
          initialView.remove();
          chatMessages.classList.remove("initial-state");
          setTimeout(() => {
            addMessage(
              "GitKit",
              `<strong>Question 1:</strong> ${questions[0]}`,
              true
            );
          }, 500);
        },
        { once: true }
      );
    }

    chatMessages.addEventListener("click", function (e) {
      if (e.target && e.target.id === "saveProjectBtn") {
        e.preventDefault();
        sendDataToServer();
      }
    });

    function sendDataToServer() {
      const saveBtn = document.getElementById("saveProjectBtn");
      saveBtn.disabled = true;
      saveBtn.innerHTML = "saving...";

      fetch("/working", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(projectData),
      })
        .then((respons) => respons.json())
        .then((data) => {
          console.assert("Success:", data);
          if (data.success) {
            saveBtn.innerHTML = "Saved!";
          } else {
            saveBtn.innerHTML = "Error! Try Again";
            saveBtn.disabled = false;
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          saveBtn.innerHTML = "Error! Try Again";
          saveBtn.disabled = false;
        });
    }

    // Event listeners
    sendBtn.addEventListener("click", handleUserResponse);
    userInput.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        handleUserResponse();
      }
    });

    userInput.addEventListener("focus", startChat);

    // Mobile sidebar functionality
    const menuToggle = document.getElementById("menuToggle");
    const closeSidebar = document.getElementById("closeSidebar");
    const sidebar = document.getElementById("sidebar");
    const mobileOverlay = document.getElementById("mobileOverlay");

    function openSidebar() {
      sidebar.classList.add("show");
      mobileOverlay.classList.add("show");
      document.body.style.overflow = "hidden";
    }

    function closeSidebarFunc() {
      sidebar.classList.remove("show");
      mobileOverlay.classList.remove("show");
      document.body.style.overflow = "auto";
    }

    if (menuToggle) {
      menuToggle.addEventListener("click", openSidebar);
    }

    if (closeSidebar) {
      closeSidebar.addEventListener("click", closeSidebarFunc);
    }

    if (mobileOverlay) {
      mobileOverlay.addEventListener("click", closeSidebarFunc);
    }

    // Close sidebar on window resize if mobile
    window.addEventListener("resize", function () {
      if (window.innerWidth >= 768) {
        closeSidebarFunc();
      }
    });
  </script>
</body>
